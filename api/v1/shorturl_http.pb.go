// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.12
// source: v1/shorturl.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationShortUrlCreateShortUrl = "/v1.ShortUrl/CreateShortUrl"
const OperationShortUrlGetOriginalUrl = "/v1.ShortUrl/GetOriginalUrl"
const OperationShortUrlRedirect = "/v1.ShortUrl/Redirect"

type ShortUrlHTTPServer interface {
	CreateShortUrl(context.Context, *CreateShortUrlRequest) (*CreateShortUrlReply, error)
	GetOriginalUrl(context.Context, *GetOriginalRequest) (*GetOriginalReply, error)
	Redirect(context.Context, *RedirectRequest) (*RedirectReply, error)
}

func RegisterShortUrlHTTPServer(s *http.Server, srv ShortUrlHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/short_urls", _ShortUrl_CreateShortUrl0_HTTP_Handler(srv))
	r.GET("/v1/short_urls", _ShortUrl_GetOriginalUrl0_HTTP_Handler(srv))
	r.GET("/{short_key}", _ShortUrl_Redirect0_HTTP_Handler(srv))
}

func _ShortUrl_CreateShortUrl0_HTTP_Handler(srv ShortUrlHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateShortUrlRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShortUrlCreateShortUrl)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateShortUrl(ctx, req.(*CreateShortUrlRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateShortUrlReply)
		return ctx.Result(200, reply)
	}
}

func _ShortUrl_GetOriginalUrl0_HTTP_Handler(srv ShortUrlHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOriginalRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShortUrlGetOriginalUrl)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOriginalUrl(ctx, req.(*GetOriginalRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOriginalReply)
		return ctx.Result(200, reply)
	}
}

func _ShortUrl_Redirect0_HTTP_Handler(srv ShortUrlHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RedirectRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShortUrlRedirect)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Redirect(ctx, req.(*RedirectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RedirectReply)
		return ctx.Result(200, reply)
	}
}

type ShortUrlHTTPClient interface {
	CreateShortUrl(ctx context.Context, req *CreateShortUrlRequest, opts ...http.CallOption) (rsp *CreateShortUrlReply, err error)
	GetOriginalUrl(ctx context.Context, req *GetOriginalRequest, opts ...http.CallOption) (rsp *GetOriginalReply, err error)
	Redirect(ctx context.Context, req *RedirectRequest, opts ...http.CallOption) (rsp *RedirectReply, err error)
}

type ShortUrlHTTPClientImpl struct {
	cc *http.Client
}

func NewShortUrlHTTPClient(client *http.Client) ShortUrlHTTPClient {
	return &ShortUrlHTTPClientImpl{client}
}

func (c *ShortUrlHTTPClientImpl) CreateShortUrl(ctx context.Context, in *CreateShortUrlRequest, opts ...http.CallOption) (*CreateShortUrlReply, error) {
	var out CreateShortUrlReply
	pattern := "/v1/short_urls"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShortUrlCreateShortUrl))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShortUrlHTTPClientImpl) GetOriginalUrl(ctx context.Context, in *GetOriginalRequest, opts ...http.CallOption) (*GetOriginalReply, error) {
	var out GetOriginalReply
	pattern := "/v1/short_urls"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShortUrlGetOriginalUrl))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShortUrlHTTPClientImpl) Redirect(ctx context.Context, in *RedirectRequest, opts ...http.CallOption) (*RedirectReply, error) {
	var out RedirectReply
	pattern := "/{short_key}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShortUrlRedirect))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
