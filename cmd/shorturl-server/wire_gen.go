// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"shorturl-server/internal/biz"
	"shorturl-server/internal/conf"
	"shorturl-server/internal/data"
	"shorturl-server/internal/provider/cache"
	"shorturl-server/internal/provider/kgs"
	"shorturl-server/internal/server"
	"shorturl-server/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, bootstrap *conf.Bootstrap, confData *conf.Data, data_Redis *conf.Data_Redis, confKGS *conf.KGS, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	shortUrlRepo := data.NewShortUrlRepo(dataData, logger)
	transaction := data.NewTransaction(dataData)
	bizCache, cleanup2, err := cache.NewRedis(data_Redis, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	kgsClient, cleanup3, err := kgs.NewKGS(confKGS, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	shortUrlUsecase := biz.NewShortUrlUsecase(shortUrlRepo, transaction, bizCache, kgsClient, bootstrap, logger)
	shortUrlService := service.NewShortUrlService(shortUrlUsecase)
	httpServer := server.NewHTTPServer(confServer, shortUrlService, logger)
	app := newApp(logger, httpServer)
	return app, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
